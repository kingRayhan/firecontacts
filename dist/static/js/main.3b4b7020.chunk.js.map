{"version":3,"sources":["store/firebase.js","store/reducers/metaReducer.js","store/reducers/authReducer.js","store/actions/actionTypes.js","store/reducers/contactReducer.js","store/reducers/bookmarkReducer.js","store/reducers/rootReducer.js","store/index.js","components/AppNavbar.js","components/Layout.js","store/actions/removeFromBookmark.js","pages/Home.js","store/actions/removeContact.js","store/actions/addToBookmark.js","pages/Add.js","store/actions/addContact.js","pages/Login.js","pages/Register.js","pages/Bookmarks.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","firestore","reducer","state","arguments","length","undefined","loading","_ref","type","payload","Object","objectSpread","loadingState","isLoggedin","user","authSetuser","dispatch","onAuthStateChanged","db","collection","doc","uid","get","then","res","setContacts","data","contacts","userId","profile","contactReducer","concat","toConsumableArray","index","findIndex","contact","id","splice","newData","bookmarks","filter","bookmark","rootReducer","combineReducers","meta","store","createStore","compose","applyMiddleware","apply","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","AppNavba","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logout","authLogout","localStorage","removeItem","toggle","bind","assertThisInitialized","isOpen","setState","react_default","a","createElement","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","Badge","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","first_name","DropdownMenu","right","DropdownItem","divider","React","Component","connect","signOut","Layout","Fragment","AppNavbar","Container","Row","Col","sm","children","removeFromBookmark","Home","searchTerm","isBookmarked","find","removeContact","confirm","search","e","target","value","_this2","Layout_Layout","react_spinners","sizeUnit","size","Input","onChange","placeholder","c","name","toLowerCase","includes","email","phone","map","Card","key","CardHeader","CardBody","CardFooter","Button","addToBookMark","contactId","userid","getItem","update","toastr","success","Add","errors","onSubmit","_callee","regenerator_default","wrap","_context","prev","next","preventDefault","keys","isEmpty","isEmail","addContact","v4","saveContact","history","push","stop","FormGroup","invalid","FormFeedback","Login","password","defineProperty","signInWithEmailAndPassword","setItem","catch","error","message","Register","last_name","facebook_profile_url","_this$state","createUserWithEmailAndPassword","set","Label","for","BookMarks","PrivateRoute","component","rest","objectWithoutProperties","Route","assign","render","Redirect","App","BrowserRouter","Switch","App_PrivateRoute","exact","path","Bookmarks","es","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.3b4b7020.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n// Initialize Firebase\nvar config = {\n    apiKey: 'AIzaSyBGc4rk9kavNhiyyO3y8BfZfPaBDnogQSc',\n    authDomain: 'firecontacts-b29e1.firebaseapp.com',\n    databaseURL: 'https://firecontacts-b29e1.firebaseio.com',\n    projectId: 'firecontacts-b29e1',\n    storageBucket: 'firecontacts-b29e1.appspot.com',\n    messagingSenderId: '792701271286',\n}\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth()\nexport default firebase.firestore()\n","export const LOADING_STATE = 'LOADING_STATE'\n\nconst reducer = (state = { loading: false }, { type, payload }) => {\n    switch (type) {\n        case LOADING_STATE: {\n            return {\n                ...state,\n                loading: payload,\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\nexport const loadingState = payload => ({\n    type: LOADING_STATE,\n    payload,\n})\n","import { AUTH_SETUSER } from '../actions/actionTypes'\nimport db, { auth } from '../firebase'\nimport { loadingState } from './metaReducer'\nimport { setContacts } from './contactReducer'\n\nconst GET_AUTH = 'GET_AUTH'\n\nconst reducer = (\n    state = {\n        isLoggedin: false,\n        user: null,\n    },\n    { type, payload }\n) => {\n    switch (type) {\n        case AUTH_SETUSER: {\n            return payload\n        }\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\nexport const authSetuser = () => dispatch => {\n    dispatch(loadingState(true))\n    auth.onAuthStateChanged(user => {\n        if (user)\n            db.collection('users')\n                .doc(user.uid)\n                .get()\n                .then(res => {\n                    dispatch(loadingState(false))\n                    dispatch(setContacts(res.data().contacts || []))\n\n                    dispatch({\n                        type: AUTH_SETUSER,\n                        payload: {\n                            isLoggedin: true,\n                            userId: user.uid,\n                            user: res.data().profile,\n                        },\n                    })\n                })\n        else {\n            dispatch(loadingState(false))\n            dispatch({\n                type: AUTH_SETUSER,\n                payload: {\n                    isLoggedin: false,\n                    user: null,\n                },\n            })\n        }\n    })\n}\n\nexport const authLogout = () => dispatch => {\n    auth.signOut().then(res => {\n        dispatch({\n            type: AUTH_SETUSER,\n            payload: {\n                isLoggedin: false,\n                user: null,\n            },\n        })\n    })\n}\n","export const ADD_CONTACT = 'ADD_CONTACT'\nexport const REMOVE_CONTACT = 'REMOVE_CONTACT'\nexport const EDIT_CONTACT = 'EDIT_CONTACT'\nexport const ADD_BOOKMARK = 'ADD_BOOKMARK'\nexport const REMOVE_BOOKMARK = 'REMOVE_BOOKMARK'\nexport const AUTH_REGISTER = 'AUTH_REGISTER'\nexport const AUTH_SETUSER = 'AUTH_SETUSER'\n","import toastr from 'toastr'\nimport db from '../firebase'\nimport { getAuth } from './authReducer'\nimport {\n    ADD_CONTACT,\n    REMOVE_CONTACT,\n    EDIT_CONTACT,\n} from '../actions/actionTypes'\nimport { loadingState } from './metaReducer'\n\nexport const SET_CONTACTS = 'SET_CONTACTS'\n\nconst contacts = []\n\nconst reducer = (state = contacts, { type, payload }) => {\n    switch (type) {\n        case ADD_CONTACT: {\n            return [payload, ...state]\n        }\n        case REMOVE_CONTACT: {\n            // id -> payload\n            const contacts = [...state]\n            const index = contacts.findIndex(contact => contact.id === payload)\n            contacts.splice(index, 1)\n            return contacts\n        }\n        case EDIT_CONTACT: {\n            // payload: { id , newdata }\n            const contacts = [...state]\n            const index = contacts.findIndex(\n                contact => contact.id === payload.id\n            )\n            contacts[index] = payload.newData\n            return contacts\n        }\n        case SET_CONTACTS: {\n            return payload\n        }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\nexport const saveContact = contact => dispatch => {\n    const userid = localStorage.getItem('auth_userId')\n\n    db.collection('users')\n        .doc(userid)\n        .get()\n        .then(res => {\n            // get existing contact array\n            const contacts =\n                res.data().contacts !== undefined\n                    ? [...res.data().contacts]\n                    : []\n            // push new contact to the array\n            contacts.push(contact)\n\n            // overrite existing contact array with new contact after push\n            db.collection('users')\n                .doc(userid)\n                .update({ contacts })\n                .then(res => {\n                    toastr.success('Successfully Saved!!')\n                })\n        })\n}\n\nexport const setContacts = payload => ({ type: SET_CONTACTS, payload })\n","import { ADD_BOOKMARK, REMOVE_BOOKMARK } from '../actions/actionTypes'\n\nconst reducer = (state = [], { type, payload }) => {\n    switch (type) {\n        case ADD_BOOKMARK: {\n            const bookmarks = [...state]\n            const exits = bookmarks.filter(\n                bookmark => bookmark.id === payload.id\n            ).length\n                ? true\n                : false\n\n            if (exits) {\n                const index = bookmarks.findIndex(\n                    contact => contact.id === payload.id\n                )\n                bookmarks.splice(index, 1)\n                return bookmarks\n            }\n\n            return [payload, ...state]\n        }\n        case REMOVE_BOOKMARK: {\n            const bookmarks = [...state]\n            const index = bookmarks.findIndex(contact => contact.id === payload)\n            bookmarks.splice(index, 1)\n            return bookmarks\n        }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import { combineReducers } from 'redux'\n\nimport contacts from './contactReducer'\nimport bookmarks from './bookmarkReducer'\nimport auth from './authReducer'\nimport meta from './metaReducer'\n\nconst rootReducer = combineReducers({ contacts, bookmarks, auth, meta })\n\nexport default rootReducer\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport db from './firebase'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(...[thunk]),\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n)\n\nexport default store\n","import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Badge,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { authLogout } from '../store/reducers/authReducer'\nclass AppNavba extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.toggle = this.toggle.bind(this)\n        this.state = {\n            isOpen: false,\n        }\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        })\n    }\n\n    logout = () => {\n        this.props.authLogout()\n        localStorage.removeItem('auth_userId')\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"danger\" dark expand=\"md\">\n                    <NavbarBrand tag={Link} to=\"/\">\n                        Contact Manager\n                    </NavbarBrand>\n                    <NavbarToggler onClick={this.toggle} />\n                    {this.props.auth.isLoggedin ? (\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink tag={Link} to=\"/\">\n                                        Home\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} to=\"/add\">\n                                        New Contact\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} to=\"/bookmarks\">\n                                        Bookmarks\n                                        {this.props.bookmarks.length !== 0 && (\n                                            <Badge className=\"ml-1\">\n                                                {this.props.bookmarks.length}\n                                            </Badge>\n                                        )}\n                                    </NavLink>\n                                </NavItem>\n                                <UncontrolledDropdown nav inNavbar>\n                                    <DropdownToggle nav caret>\n                                        Hello, {this.props.auth.user.first_name}\n                                    </DropdownToggle>\n                                    <DropdownMenu right>\n                                        <DropdownItem>settings</DropdownItem>\n                                        <DropdownItem divider />\n                                        <DropdownItem onClick={this.logout}>\n                                            Logout\n                                        </DropdownItem>\n                                    </DropdownMenu>\n                                </UncontrolledDropdown>\n                            </Nav>\n                        </Collapse>\n                    ) : (\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink tag={Link} to=\"/login\">\n                                        Login\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} to=\"/register\">\n                                        Register\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    )}\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    ({ auth, bookmarks }) => ({ auth, bookmarks }),\n    { authLogout }\n)(AppNavba)\n","import React from 'react'\n\nimport AppNavbar from './AppNavbar'\n\nimport { Container, Row, Col } from 'reactstrap'\n\nexport default class Layout extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <AppNavbar />\n                <Container className=\"py-5\">\n                    <Row>\n                        <Col sm={8} className=\"mx-auto\">\n                            {this.props.children}\n                        </Col>\n                    </Row>\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n","import { REMOVE_BOOKMARK } from './actionTypes'\n\nexport const removeFromBookmark = id => ({ type: REMOVE_BOOKMARK, payload: id })\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\n\nimport { connect } from 'react-redux'\n\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    CardFooter,\n    Button,\n    Input,\n} from 'reactstrap'\nimport { removeContact } from '../store/actions/removeContact'\nimport { addToBookMark } from '../store/actions/addToBookmark'\nimport { removeFromBookmark } from '../store/actions/removeFromBookmark'\nimport { BarLoader } from 'react-spinners'\nclass Home extends Component {\n    state = {\n        searchTerm: '',\n    }\n\n    isBookmarked = id => {\n        return this.props.bookmarks.find(bookmarks => bookmarks.id === id)\n            ? true\n            : false\n    }\n\n    removeContact = contact => {\n        if (window.confirm('Sure to delete?')) {\n            this.props.removeContact(contact.id)\n            this.props.removeFromBookmark(contact.id)\n        }\n    }\n\n    search = e => {\n        this.setState({ searchTerm: e.target.value })\n    }\n\n    render() {\n        if (this.props.meta.loading)\n            return (\n                <Layout>\n                    <div className=\"text-center\">\n                        <BarLoader\n                            sizeUnit={'px'}\n                            size={500}\n                            color={'#123abc'}\n                        />\n                    </div>\n                </Layout>\n            )\n        if (this.props.contacts.length === 0)\n            return (\n                <Layout>\n                    <h1 className=\"text-muted\">\n                        No saved contact in phonebook\n                    </h1>\n                </Layout>\n            )\n\n        return (\n            <Layout>\n                <div>\n                    <Input\n                        onChange={this.search}\n                        placeholder=\"Search by Name / Email / phonenumber\"\n                    />\n                </div>\n\n                {this.props.contacts\n                    .filter(\n                        c =>\n                            c.name\n                                .toLowerCase()\n                                .includes(\n                                    this.state.searchTerm.toLowerCase()\n                                ) ||\n                            c.email\n                                .toLowerCase()\n                                .includes(\n                                    this.state.searchTerm.toLowerCase()\n                                ) ||\n                            c.phone\n                                .toLowerCase()\n                                .includes(this.state.searchTerm.toLowerCase())\n                    )\n                    .map(contact => (\n                        <Card className=\"my-3\" key={contact.id}>\n                            <CardHeader>{contact.name}</CardHeader>\n                            <CardBody>\n                                <p>Name: {contact.name}</p>\n                                <p>Email: {contact.email}</p>\n                                <p>Phone: {contact.phone}</p>\n                            </CardBody>\n                            <CardFooter>\n                                <Button\n                                    color={\n                                        this.isBookmarked(contact.id)\n                                            ? `primary`\n                                            : `secondary`\n                                    }\n                                    onClick={() =>\n                                        this.props.addToBookMark(contact)\n                                    }\n                                >\n                                    <i className=\"fa fa-heart\" />\n                                </Button>\n                                <Button\n                                    color=\"danger\"\n                                    className=\"ml-2\"\n                                    onClick={() => this.removeContact(contact)}\n                                >\n                                    <i className=\"fa fa-times\" />\n                                </Button>\n                            </CardFooter>\n                        </Card>\n                    ))}\n            </Layout>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ ...state }),\n    { removeContact, addToBookMark, removeFromBookmark }\n)(Home)\n","import toastr from 'toastr'\nimport { REMOVE_CONTACT } from './actionTypes'\n\nimport db from '../firebase'\nexport const removeContact = contactId => dispatch => {\n    const userid = localStorage.getItem('auth_userId')\n\n    db.collection('users')\n        .doc(userid)\n        .get()\n        .then(res => {\n            // get existing contact array\n            const contacts = res.data().contacts\n            const index = contacts.findIndex(c => c.id === contactId)\n            contacts.splice(index, 1)\n\n            // overrite existing contact array with new contact after push\n            db.collection('users')\n                .doc(userid)\n                .update({ contacts })\n                .then(res => {\n                    toastr.success('Successfully Deleted!!')\n                    dispatch({\n                        type: REMOVE_CONTACT,\n                        payload: contactId,\n                    })\n                })\n        })\n}\n","import { ADD_BOOKMARK } from './actionTypes'\n\nexport const addToBookMark = contact => ({\n    type: ADD_BOOKMARK,\n    payload: contact,\n})\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\nimport { FormGroup, Input, Label, FormFeedback, Button } from 'reactstrap'\nimport { v4 } from 'uuid'\nimport { connect } from 'react-redux'\nimport { addContact } from '../store/actions/addContact'\n\nimport { isEmail, isEmpty } from 'validator'\nimport { saveContact } from '../store/reducers/contactReducer'\n\nclass Add extends Component {\n    state = {\n        contact: {\n            name: '',\n            email: '',\n            phone: '',\n        },\n        errors: {},\n    }\n\n    onSubmit = async e => {\n        e.preventDefault()\n\n        //TODO: async validation\n        const errors = {}\n\n        Object.keys(this.state.contact).map(key => {\n            if (isEmpty(this.state.contact[key])) {\n                return (errors[key] = `${key} can't be empty`)\n            }\n            key === 'email' &&\n                !isEmail(this.state.contact[key]) &&\n                (errors[key] = `${key} is not a valid email address`)\n        })\n        this.setState({ errors })\n\n        // TODO: how it works?\n        if (Object.keys(errors).length === 0) {\n            this.props.addContact({ id: v4(), ...this.state.contact }) // save in redux store\n            this.props.saveContact(\n                { id: v4(), ...this.state.contact },\n                this.props.auth.userId\n            ) // save in firebase db\n            this.props.history.push('/')\n        }\n    }\n\n    onChange = e => {\n        const contact = { ...this.state.contact }\n        contact[e.target.name] = e.target.value\n\n        this.setState({ contact })\n    }\n\n    render() {\n        return (\n            <Layout>\n                <div className=\"py-3\">\n                    <h2 className=\"text-uppercase\">Add new contact</h2>\n                </div>\n                <form onSubmit={this.onSubmit}>\n                    {Object.keys(this.state.contact).map(key => (\n                        <FormGroup key={key}>\n                            <Input\n                                onChange={this.onChange}\n                                placeholder={key}\n                                // type={key === 'email' ? 'email' : 'text'}\n                                type={`text`}\n                                name={key}\n                                invalid={\n                                    Object.keys(this.state.errors).length &&\n                                    this.state.errors[key]\n                                        ? true\n                                        : false\n                                }\n                            />\n                            {this.state.errors[key] && (\n                                <FormFeedback>\n                                    {this.state.errors[key]}\n                                </FormFeedback>\n                            )}\n                        </FormGroup>\n                    ))}\n                    <Button color=\"danger\">Save</Button>\n                </form>\n            </Layout>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ ...state }),\n    { addContact, saveContact }\n)(Add)\n","import { ADD_CONTACT } from './actionTypes'\n\nexport const addContact = contact => ({\n    type: ADD_CONTACT,\n    payload: { ...contact },\n})\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\nimport {\n    FormGroup,\n    Input,\n    Label,\n    FormFeedback,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n} from 'reactstrap'\n\nimport { connect } from 'react-redux'\nimport { auth } from '../store/firebase'\nimport toastr from 'toastr'\nimport { authSetuser } from '../store/reducers/authReducer'\n\nclass Login extends Component {\n    state = {\n        email: '',\n        password: '',\n    }\n\n    componentDidMount() {\n        localStorage.getItem('auth_userId') !== null &&\n            this.props.history.push('/')\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    onSubmit = e => {\n        e.preventDefault()\n        auth.signInWithEmailAndPassword(this.state.email, this.state.password)\n            .then(res => {\n                localStorage.setItem('auth_userId', res.user.uid)\n                this.props.history.push('/')\n            })\n            .catch(e => toastr.error(e.message))\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Card>\n                    <CardHeader>Login</CardHeader>\n                    <CardBody>\n                        <form onSubmit={this.onSubmit}>\n                            {Object.keys(this.state).map(key => (\n                                <FormGroup key={key}>\n                                    <Input\n                                        placeholder={key}\n                                        value={this.state[key]}\n                                        name={key}\n                                        onChange={this.onChange}\n                                        type={\n                                            key === 'password' ? key : 'email'\n                                        }\n                                    />\n                                </FormGroup>\n                            ))}\n                            <FormGroup>\n                                <Button color=\"danger\">Register</Button>\n                            </FormGroup>\n                        </form>\n                    </CardBody>\n                </Card>\n            </Layout>\n        )\n    }\n}\n\nexport default connect(\n    null,\n    { authSetuser }\n)(Login)\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\nimport toastr from 'toastr'\nimport {\n    FormGroup,\n    Input,\n    Label,\n    FormFeedback,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n} from 'reactstrap'\n\nimport db, { auth } from '../store/firebase'\n\nimport { connect } from 'react-redux'\n\nclass Register extends Component {\n    state = {\n        first_name: '',\n        last_name: '',\n        facebook_profile_url: '',\n        email: '',\n        password: '',\n    }\n    componentDidMount() {\n        localStorage.getItem('auth_userId') !== null &&\n            this.props.history.push('/')\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    onSubmit = e => {\n        e.preventDefault()\n\n        const {\n            first_name,\n            last_name,\n            facebook_profile_url,\n            email,\n            password,\n        } = this.state\n\n        auth.createUserWithEmailAndPassword(email, password)\n            .then(res => {\n                localStorage.setItem('auth_userId', res.user.uid)\n\n                db.collection('users')\n                    .doc(res.user.uid)\n                    .set({\n                        profile: {\n                            first_name,\n                            last_name,\n                            facebook_profile_url,\n                            email,\n                        },\n                    })\n                    .then(res => {\n                        this.props.history.push('/')\n                        toastr.success('Registration successfully')\n                    })\n            })\n            .catch(e => toastr.error(e.message))\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Card>\n                    <CardHeader>Register</CardHeader>\n                    <CardBody>\n                        <form onSubmit={this.onSubmit}>\n                            {Object.keys(this.state).map(key => (\n                                <FormGroup key={key}>\n                                    <Label for={key}>{key}</Label>\n                                    <Input\n                                        id={key}\n                                        placeholder={key}\n                                        value={this.state[key]}\n                                        name={key}\n                                        onChange={this.onChange}\n                                        type={\n                                            key === 'password' ||\n                                            key === 'email'\n                                                ? key\n                                                : key === 'facebook_profile_url'\n                                                ? 'url'\n                                                : 'text'\n                                        }\n                                    />\n                                </FormGroup>\n                            ))}\n                            <FormGroup>\n                                <Button color=\"danger\">Register</Button>\n                            </FormGroup>\n                        </form>\n                    </CardBody>\n                </Card>\n            </Layout>\n        )\n    }\n}\n\nexport default connect(null)(Register)\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\nimport { Card, CardHeader, CardBody, CardFooter, Button } from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { removeFromBookmark } from '../store/actions/removeFromBookmark'\nclass BookMarks extends Component {\n    render() {\n        return (\n            <Layout>\n                <h1>Bookmarks</h1>\n                <h3>Total bookmarks: {this.props.bookmarks.length}</h3>\n\n                {this.props.bookmarks.map(contact => (\n                    <Card className=\"my-3\" key={contact.id}>\n                        <CardHeader>{contact.name}</CardHeader>\n                        <CardBody>\n                            <p>Name: {contact.name}</p>\n                            <p>Email: {contact.email}</p>\n                            <p>Phone: {contact.phone}</p>\n                        </CardBody>\n                        <CardFooter>\n                            <Button\n                                color=\"danger\"\n                                onClick={() =>\n                                    window.confirm('Sure to delete?') &&\n                                    this.props.removeFromBookmark(contact.id)\n                                }\n                            >\n                                <i className=\"fa fa-times\" />\n                            </Button>\n                        </CardFooter>\n                    </Card>\n                ))}\n            </Layout>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ ...state }),\n    { removeFromBookmark }\n)(BookMarks)\n","import React, { Component } from 'react'\nimport db from './store/firebase'\nimport Home from './pages/Home'\nimport Add from './pages/Add'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport Bookmarks from './pages/Bookmarks'\nimport { connect } from 'react-redux'\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\n\nconst PrivateRoute = ({ component: Component, isLoggedin, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            localStorage.getItem('auth_userId') !== null ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n)\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <PrivateRoute exact path=\"/\" component={Home} />\n                    <PrivateRoute exact path=\"/add\" component={Add} />\n                    <PrivateRoute\n                        exact\n                        path=\"/bookmarks\"\n                        component={Bookmarks}\n                    />\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/register\" component={Register} />\n                </Switch>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default connect(state => ({ ...state }))(App)\n","import React from 'react';\nimport { render } from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'toastr/build/toastr.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { authSetuser } from './store/reducers/authReducer';\nimport App from './App';\nstore.dispatch(authSetuser()); // check is logged in\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}